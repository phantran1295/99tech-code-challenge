import * as React from "react";

type Blockchain = "Osmosis" | "Ethereum" | "Arbitrum" | "Zilliqa" | "Neo";

interface WalletBalance {
    currency: string;
    amount: number;
    blockchain: Blockchain;
}

interface Props extends BoxProps { }

const getPriority = (blockchain: Blockchain): number => {
    switch (blockchain) {
        case 'Osmosis':
            return 100
        case 'Ethereum':
            return 50
        case 'Arbitrum':
            return 30
        case 'Zilliqa':
            return 20
        case 'Neo':
            return 20
        default:
            return -Infinity
    }
}

const WalletPage: React.FC<Props> = (props: Props) => {
    const { children, ...rest } = props;
    const balances = useWalletBalances();
    const prices = usePrices();

    const sortedBalances = React.useMemo(() => {
        return balances.filter((balance: WalletBalance) => {
            const balancePriority = getPriority(balance.blockchain);
            if (balancePriority > -Infinity) {
                if (balance.amount > 0) {
                    return true;
                }
            }
            return false
        }).sort((lhs: WalletBalance, rhs: WalletBalance) => {
            const leftPriority = getPriority(lhs.blockchain);
            const rightPriority = getPriority(rhs.blockchain);
            if (rightPriority > leftPriority) return 1;
            if (leftPriority > rightPriority) return -1;
            return 0;
        });
    }, [balances]);

    const rows = React.useMemo(() => {
        return sortedBalances.map((balance: WalletBalance, index: number) => {
            const usdValue = (prices?.[balance.currency] ?? 0) * balance.amount;
            return (
                <WalletRow 
                    className={classes.row}
                    key={index}
                    amount={balance.amount}
                    usdValue={usdValue}
                    formattedAmount={balance.amount.toFixed(2)}
                />
            )
        })
    }, [sortedBalances, prices]);

    return (
        <div {...rest} >
            {rows}
            {children}
        </div>
    )
}